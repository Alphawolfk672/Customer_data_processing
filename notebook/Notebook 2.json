{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b83ee63a-b149-4c4c-835c-98c4b90ea66a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Load the existing Delta table\r\n",
					"delta_table = DeltaTable.forPath(spark, staging_table_path)\r\n",
					"\r\n",
					"# Load new data for upsert (assuming new data is loaded as a DataFrame)\r\n",
					"new_data_df = spark.read.csv(\"abfss://<container>@<storage_account>.dfs.core.windows.net/data/new_data.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"# Perform upsert using Delta's MERGE feature\r\n",
					"delta_table.alias(\"staging\").merge(\r\n",
					"    new_data_df.alias(\"new_data\"),\r\n",
					"    \"staging.customer_id = new_data.customer_id\"\r\n",
					").whenMatchedUpdateAll() \\\r\n",
					" .whenNotMatchedInsertAll() \\\r\n",
					" .execute()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}