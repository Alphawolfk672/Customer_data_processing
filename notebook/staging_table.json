{
	"name": "staging_table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkkeshav672",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9f2ce5ef-93f2-48c5-b309-40b750621f91"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9072a345-2a6f-46b8-920e-bbcec129efc5/resourceGroups/incubyte/providers/Microsoft.Synapse/workspaces/incubyte-hostpitaldata/bigDataPools/sparkkeshav672",
				"name": "sparkkeshav672",
				"type": "Spark",
				"endpoint": "https://incubyte-hostpitaldata.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkkeshav672",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Initialize Spark session\r\n",
					"spark = SparkSession.builder \\\r\n",
					"    .appName(\"Customer_ETL\") \\\r\n",
					"    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\r\n",
					"    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\r\n",
					"    .getOrCreate()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Create Delta table for staging\r\n",
					"staging_table_path = \"abfss://hospital-data@keshavgen2synapse.dfs.core.windows.net/delta/staging_table\"\r\n",
					"\r\n",
					"# Create an empty Delta table if it doesn't exist\r\n",
					"spark.sql(f\"\"\"\r\n",
					"CREATE TABLE IF NOT EXISTS delta.`{staging_table_path}` (\r\n",
					"    Customer_Name STRING,\r\n",
					"    Customer_Id STRING,\r\n",
					"    Open_Date DATE,\r\n",
					"    Last_Consulted_Date DATE,\r\n",
					"    Vaccination_Id STRING,\r\n",
					"    Dr_Name STRING,\r\n",
					"    State STRING,\r\n",
					"    Country STRING,\r\n",
					"    post_code INT,\r\n",
					"    DOB DATE,\r\n",
					"    Is_Active STRING\r\n",
					") USING DELTA\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"spark.sql(f\"\"\"\r\n",
					"    CREATE TABLE IF NOT EXISTS customer_staging\r\n",
					"    USING DELTA\r\n",
					"    LOCATION '{staging_table_path}'\r\n",
					"\"\"\")\r\n",
					""
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, DateType\r\n",
					"from pyspark.sql.functions import col,to_date\r\n",
					"from pyspark.sql import functions as F\r\n",
					"input_path = \"abfss://hospital-data@keshavgen2synapse.dfs.core.windows.net/Customer_data_src/customer_09102024.csv\"\r\n",
					"\r\n",
					"# Load CSV data into DataFrame\r\n",
					"df = spark.read.csv(input_path, header=True,sep='|')\r\n",
					"df_filter = df.withColumn(\"Open_Date\", to_date(col(\"Open_Date\"), \"yyyyMMdd\"))\r\n",
					"df_filter = df_filter.withColumn(\"Last_Consulted_Date\" , to_date(col(\"Last_Consulted_Date\"), \"yyyyMMdd\"))\r\n",
					"df_filter = df_filter.withColumn(\"DOB\", to_date(col(\"DOB\"), \"ddMMyyyy\"))\r\n",
					"df_filter = df_filter.withColumn(\"post_code\", F.lit(None).cast(\"INT\"))\r\n",
					"df_filter = df_filter.withColumn(\"Is_Active\", col(\"Is_Active \"))\r\n",
					"\r\n",
					"\r\n",
					"# Select the DataFrame with reordered columns\r\n",
					"df_final = df_filter.select(\"Customer_Name\", \"Customer_Id\", \"Open_Date\", \"Last_Consulted_Date\", \"Vaccination_Id\", \"Dr_Name\", \"State\", \"Country\", \"post_code\"\r\n",
					", \"DOB\", \"Is_Active\")\r\n",
					"df_final.show()\r\n",
					"#df_filter.show()\r\n",
					"\r\n",
					"#df_filter.explain()\r\n",
					"\r\n",
					"#df_filter.describe()\r\n",
					"# Write data to Delta staging table\r\n",
					"df_final.write.format(\"delta\").mode(\"append\").save(staging_table_path)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_result = spark.sql(\"SELECT * FROM customer_staging\")\r\n",
					"#df_result.show()\r\n",
					"spark.sql(\"SHOW TABLES\").show()\r\n",
					""
				],
				"execution_count": 100
			}
		]
	}
}